###########################################
#                                         #
#        nixysa - npapi glue builder      #
#                                         #
###########################################
import os
import sys
from Bundle import *

Import('env')
Import('libs')
Import('deplibs')

IDL_SOURCES=[Glob('*.idl')]
SOURCES=[Glob('*.cpp')]
STATIC_GLUE_SOURCES=['common.cc', 'npn_api.cc', 'static_object.cc', 'main.cc']

env.Append(
    LIBS=[Split(deplibs), Split(libs)],
    NIXYSA_DIR = '$ROOT/nixysa',
    STATIC_GLUE_DIR = '$NIXYSA_DIR/static_glue/npapi',
    NPAPI_DIR = '$ROOT/third_party/npapi/include',
    GLUE_DIR = '$ROOT/build/$PLATFORM/glue' ,
    CPPPATH = ['.', '$ROOT/lib/include', '$STATIC_GLUE_DIR', '$NPAPI_DIR', '$GLUE_DIR'],
)

if int(ARGUMENTS.get('localpath',0)):
  env.AppendENVPath('PATH',os.environ['PATH'])

env.Append(ENV={'PYTHON': sys.executable})
if sys.platform == 'win32':
  env.Append(CODEGEN = 'codegen.bat',
             CPPDEFINES = ['WIN32', 'OS_WINDOWS'])
elif sys.platform == 'darwin':
  env.Append(CODEGEN = 'codegen.sh',
             CPPDEFINES = ['XP_MACOSX', 'OS_MACOSX'],
             LINKFLAGS = '-framework CoreFoundation -framework IOKit')
else:
  env.Append(CODEGEN = 'codegen.sh',
             CPPDEFINES = ['OS_LINUX'])

def NixysaEmitter(target, source, env):
  bases = [os.path.splitext(s.name)[0] for s in source] + ['globals']
  targets = ['$GLUE_DIR/%s_glue.cc' % b for b in bases]
  targets += ['$GLUE_DIR/%s_glue.h' % b for b in bases]
  targets += ['$GLUE_DIR/hash', '$GLUE_DIR/parsetab.py']
  return targets, source

NIXYSA_CMDLINE = ' '.join([env.File('$NIXYSA_DIR/$CODEGEN').abspath,
                           '--output-dir=$GLUE_DIR',
                           '--generate=npapi',
                           '$SOURCES'])

env['BUILDERS']['Nixysa'] = Builder(action=NIXYSA_CMDLINE,
                                    emitter=NixysaEmitter)

AUTOGEN_OUTPUT = env.Nixysa(IDL_SOURCES)
AUTOGEN_CC_FILES = [f for f in AUTOGEN_OUTPUT if f.suffix == '.cc']

# Targets
npapi_plug = env.LoadableModule("rpl", AUTOGEN_CC_FILES + SOURCES +
                  ['$STATIC_GLUE_DIR/' + f for f in STATIC_GLUE_SOURCES] )

if( env['PLATFORM'] == 'darwin'):
    TOOL_BUNDLE(env)
    npapi_plug = env.MakeBundle('rpl.plugin',npapi_plug,'./Info.plist',
                 typecode='BRPL', creator='????', resources=['English.lproj'])

Return('npapi_plug')
